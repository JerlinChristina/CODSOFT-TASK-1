import random

# Constants for the players
PLAYER_X = 'X'
PLAYER_O = 'O'

# Function to print the Tic-Tac-Toe board
def print_board(board):
    for i in range(3):
        print(" | ".join(board[i]))
        if i < 2:
            print("-" * 5)

# Check if a player has won
def check_win(board, player):
    # Check rows, columns, and diagonals
    for i in range(3):
        if all([board[i][j] == player for j in range(3)]) or \
           all([board[j][i] == player for j in range(3)]):
            return True
    if board[0][0] == player and board[1][1] == player and board[2][2] == player:
        return True
    if board[0][2] == player and board[1][1] == player and board[2][0] == player:
        return True
    return False

# Check if the board is full (i.e., a draw)
def is_board_full(board):
    return all([board[i][j] != ' ' for i in range(3) for j in range(3)])

# Minimax algorithm to find the best move for the AI
def minimax(board, depth, is_maximizing, alpha, beta):
    # Base cases: check if the game has ended
    if check_win(board, PLAYER_X):
        return -1  # X wins
    if check_win(board, PLAYER_O):
        return 1  # O wins
    if is_board_full(board):
        return 0  # Draw

    # Maximizing for AI (O)
    if is_maximizing:
        max_eval = float('-inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = PLAYER_O
                    eval = minimax(board, depth + 1, False, alpha, beta)
                    board[i][j] = ' '
                    max_eval = max(max_eval, eval)
                    alpha = max(alpha, eval)
                    if beta <= alpha:
                        break  # Beta cut-off
        return max_eval
    else:  # Minimizing for human (X)
        min_eval = float('inf')
        for i in range(3):
            for j in range(3):
                if board[i][j] == ' ':
                    board[i][j] = PLAYER_X
                    eval = minimax(board, depth + 1, True, alp
